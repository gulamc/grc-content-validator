"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/controls/score/route";
exports.ids = ["app/api/controls/score/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcontrols%2Fscore%2Froute&page=%2Fapi%2Fcontrols%2Fscore%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontrols%2Fscore%2Froute.ts&appDir=%2Fworkspaces%2Fgrc-content-validator%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2Fgrc-content-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcontrols%2Fscore%2Froute&page=%2Fapi%2Fcontrols%2Fscore%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontrols%2Fscore%2Froute.ts&appDir=%2Fworkspaces%2Fgrc-content-validator%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2Fgrc-content-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _workspaces_grc_content_validator_app_api_controls_score_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/controls/score/route.ts */ \"(rsc)/./app/api/controls/score/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/controls/score/route\",\n        pathname: \"/api/controls/score\",\n        filename: \"route\",\n        bundlePath: \"app/api/controls/score/route\"\n    },\n    resolvedPagePath: \"/workspaces/grc-content-validator/app/api/controls/score/route.ts\",\n    nextConfigOutput,\n    userland: _workspaces_grc_content_validator_app_api_controls_score_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/controls/score/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjb250cm9scyUyRnNjb3JlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZjb250cm9scyUyRnNjb3JlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY29udHJvbHMlMkZzY29yZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZ3b3Jrc3BhY2VzJTJGZ3JjLWNvbnRlbnQtdmFsaWRhdG9yJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZ3b3Jrc3BhY2VzJTJGZ3JjLWNvbnRlbnQtdmFsaWRhdG9yJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNpQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2RlYWRsaW5lcy1kZW1vLXVpLz8wODhhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi93b3Jrc3BhY2VzL2dyYy1jb250ZW50LXZhbGlkYXRvci9hcHAvYXBpL2NvbnRyb2xzL3Njb3JlL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jb250cm9scy9zY29yZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NvbnRyb2xzL3Njb3JlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9jb250cm9scy9zY29yZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi93b3Jrc3BhY2VzL2dyYy1jb250ZW50LXZhbGlkYXRvci9hcHAvYXBpL2NvbnRyb2xzL3Njb3JlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jb250cm9scy9zY29yZS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcontrols%2Fscore%2Froute&page=%2Fapi%2Fcontrols%2Fscore%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontrols%2Fscore%2Froute.ts&appDir=%2Fworkspaces%2Fgrc-content-validator%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2Fgrc-content-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/controls/score/route.ts":
/*!*****************************************!*\
  !*** ./app/api/controls/score/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _scorer_controls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/scorer/controls */ \"(rsc)/./scorer/controls.ts\");\n// app/api/control/score/route.ts\n\n\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        const input = {\n            id: body.id || \"\",\n            name: body.name || \"\",\n            description: body.description || \"\",\n            guidance: body.guidance || \"\",\n            framework: body.framework || \"\"\n        };\n        const result = (0,_scorer_controls__WEBPACK_IMPORTED_MODULE_1__.scoreControl)(input);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Scoring failed\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2NvbnRyb2xzL3Njb3JlL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlDQUFpQztBQUN1QjtBQUNPO0FBRXhELGVBQWVFLEtBQUtDLEdBQWdCO0lBQ3pDLElBQUk7UUFDRixNQUFNQyxPQUFPLE1BQU1ELElBQUlFLElBQUk7UUFFM0IsTUFBTUMsUUFBc0I7WUFDMUJDLElBQUlILEtBQUtHLEVBQUUsSUFBSTtZQUNmQyxNQUFNSixLQUFLSSxJQUFJLElBQUk7WUFDbkJDLGFBQWFMLEtBQUtLLFdBQVcsSUFBSTtZQUNqQ0MsVUFBVU4sS0FBS00sUUFBUSxJQUFJO1lBQzNCQyxXQUFXUCxLQUFLTyxTQUFTLElBQUk7UUFDL0I7UUFFQSxNQUFNQyxTQUFTWCw4REFBWUEsQ0FBQ0s7UUFFNUIsT0FBT04scURBQVlBLENBQUNLLElBQUksQ0FBQ087SUFDM0IsRUFBRSxPQUFPQyxPQUFZO1FBQ25CLE9BQU9iLHFEQUFZQSxDQUFDSyxJQUFJLENBQ3RCO1lBQUVRLE9BQU9BLE1BQU1DLE9BQU8sSUFBSTtRQUFpQixHQUMzQztZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlYWRsaW5lcy1kZW1vLXVpLy4vYXBwL2FwaS9jb250cm9scy9zY29yZS9yb3V0ZS50cz80NWY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGFwcC9hcGkvY29udHJvbC9zY29yZS9yb3V0ZS50c1xuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgc2NvcmVDb250cm9sLCBDb250cm9sSW5wdXQgfSBmcm9tIFwiQC9zY29yZXIvY29udHJvbHNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxOiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpO1xuICAgIFxuICAgIGNvbnN0IGlucHV0OiBDb250cm9sSW5wdXQgPSB7XG4gICAgICBpZDogYm9keS5pZCB8fCBcIlwiLFxuICAgICAgbmFtZTogYm9keS5uYW1lIHx8IFwiXCIsXG4gICAgICBkZXNjcmlwdGlvbjogYm9keS5kZXNjcmlwdGlvbiB8fCBcIlwiLFxuICAgICAgZ3VpZGFuY2U6IGJvZHkuZ3VpZGFuY2UgfHwgXCJcIixcbiAgICAgIGZyYW1ld29yazogYm9keS5mcmFtZXdvcmsgfHwgXCJcIlxuICAgIH07XG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gc2NvcmVDb250cm9sKGlucHV0KTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgXCJTY29yaW5nIGZhaWxlZFwiIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInNjb3JlQ29udHJvbCIsIlBPU1QiLCJyZXEiLCJib2R5IiwianNvbiIsImlucHV0IiwiaWQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJndWlkYW5jZSIsImZyYW1ld29yayIsInJlc3VsdCIsImVycm9yIiwibWVzc2FnZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/controls/score/route.ts\n");

/***/ }),

/***/ "(rsc)/./scorer/controls.ts":
/*!****************************!*\
  !*** ./scorer/controls.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scoreControl: () => (/* binding */ scoreControl)\n/* harmony export */ });\n/* harmony import */ var _specs_controls_standard_v1_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../specs/controls_standard.v1.json */ \"(rsc)/./specs/controls_standard.v1.json\");\n// scorer/controls.ts - Enhanced Control Scoring aligned with GRC Content Standard\n\nconst spec = _specs_controls_standard_v1_json__WEBPACK_IMPORTED_MODULE_0__;\n// ========== UTILITIES ==========\nfunction dedupe(arr) {\n    if (!arr) return arr;\n    return Array.from(new Set(arr.filter(Boolean)));\n}\nfunction looksStructured(text) {\n    return /(^|\\n)\\s*(?:[-*•]|\\d+[.)]|[a-z][.)])\\s+/m.test(text);\n}\nfunction countSentences(text) {\n    return text.split(/[.!?]+/).filter((s)=>s.trim().length > 0).length;\n}\nfunction extractSteps(text) {\n    const steps = [];\n    // Method 1: Extract steps on separate lines\n    const lines = text.split(\"\\n\");\n    for (const line of lines){\n        if (/^\\s*(?:[-*•]|\\d+[.)]|[a-z][.)])\\s+(.+)/.test(line)) {\n            steps.push(line.trim());\n        }\n    }\n    // Method 2: If no line-based steps, look for inline numbered steps\n    if (steps.length === 0) {\n        // Find ALL \"number. text\" patterns using global regex\n        const pattern = /(\\d+[.)])\\s*([^;]+)/g;\n        let match;\n        while((match = pattern.exec(text)) !== null){\n            const stepText = match[2].trim();\n            if (stepText.length > 5) {\n                steps.push(stepText);\n            }\n        }\n    }\n    return steps;\n}\n// ========== REGEX PATTERNS ==========\nconst MODAL_VERBS = /\\b(should|could|may|might|must|shall|ensure|ensures|ensured)\\b/i;\nconst VENDOR_NAMES = /\\b(aws|azure|gcp|google\\s+cloud|okta|servicenow|cisco|palo\\s*alto|fortinet|splunk|datadog|salesforce|snowflake|crowdstrike|microsoft|oracle|ibm|sap)\\b/i;\nconst JARGON_WORDS = /\\b(utilize|leverage|synergy|holistic|best[-\\s]?of[-\\s]?breed|operationalize)\\b/i;\nconst ROLE_SPECIFIC = /\\b(it|security|engineering|devops|audit|privacy|hr|legal|finance)\\s+(team|dept|department|administrator|manager)\\b/i;\nconst DIRECTIVE_VERBS = /^\\s*(configure|install|deploy|enable|set\\s*up|create|develop|implement|establish|define)\\b/i;\nconst PRESENT_TENSE_INDICATORS = /\\b(is|are|has|have|exists?|remains?|includes?|contains?|provides?|ensures?|maintains?|supports?|performs?|conducts?)\\b/i;\nconst PASSIVE_VOICE_INDICATORS = /\\b(is|are|be|being|been)\\s+[a-z]+ed\\b/i;\nconst ACTION_WORDS = /\\b(protection|detection|monitoring|review|assessment|management|implementation|configuration|establishment|maintenance|planning|testing|auditing|tracking|reporting|training|enforcement|validation|verification|analysis)\\b/i;\n// ========== ID QUALITY CHECKS (15% weight) ==========\nfunction evalIdStructured(id) {\n    const hasSeparator = id.includes(\".\");\n    const points = hasSeparator ? 20 : 12;\n    const violations = hasSeparator ? undefined : [\n        \"Use structured format with separator (e.g., GDPR.1.1 or NIST.AC.1)\"\n    ];\n    return {\n        id: \"id.structured\",\n        label: \"Structured format (prefix.section.number)\",\n        points,\n        max: 20,\n        status: points === 20 ? \"PASS\" : \"WARN\",\n        notes: violations?.[0],\n        violations\n    };\n}\nfunction evalIdLength(id) {\n    const len = id.length;\n    const withinBounds = len > 0 && len <= (spec.rules.id.max_length || 24);\n    const points = withinBounds ? 15 : len > 24 ? 8 : 0;\n    const violations = [];\n    if (!withinBounds) {\n        if (len === 0) violations.push(\"ID cannot be empty\");\n        else violations.push(`ID too long (${len} chars). Keep under ${spec.rules.id.max_length || 24} characters.`);\n    }\n    return {\n        id: \"id.length\",\n        label: \"Appropriate length\",\n        points,\n        max: 15,\n        status: points === 15 ? \"PASS\" : points >= 10 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? violations : undefined\n    };\n}\nfunction evalIdUniqueness(id) {\n    // This is a placeholder - in real implementation would check against database\n    // For MVP, we just validate it's not obviously invalid\n    const hasContent = id.trim().length > 0;\n    return {\n        id: \"id.uniqueness\",\n        label: \"Uniqueness (assumed within framework)\",\n        points: hasContent ? 15 : 0,\n        max: 15,\n        status: hasContent ? \"PASS\" : \"FAIL\",\n        notes: hasContent ? \"Uniqueness validation requires database check\" : \"ID is empty\"\n    };\n}\n// ========== NAME QUALITY CHECKS (15% weight) ==========\nfunction evalNameConcise(name) {\n    const words = name.trim().split(/\\s+/).length;\n    const maxWords = spec.rules.name.concise_max_words || 12;\n    const withinBounds = words > 0 && words <= maxWords;\n    const points = withinBounds ? 25 : words > maxWords ? 15 : 0;\n    const violations = withinBounds ? undefined : words === 0 ? [\n        \"Name cannot be empty\"\n    ] : [\n        `Too verbose (${words} words). Keep under ${maxWords} words.`\n    ];\n    return {\n        id: \"name.concise\",\n        label: \"Concise (≤12 words)\",\n        points,\n        max: 25,\n        status: points === 25 ? \"PASS\" : points >= 15 ? \"WARN\" : \"FAIL\",\n        notes: violations?.[0],\n        violations\n    };\n}\nfunction evalNameActionOriented(name) {\n    const hasActionWord = ACTION_WORDS.test(name);\n    const isVague = /\\b(things|stuff|items|matters|issues)\\b/i.test(name);\n    let points = 25;\n    const violations = [];\n    if (!hasActionWord) {\n        points -= 8;\n        violations.push(\"Use action-oriented or specific language (e.g., 'Protection of...', 'Access Review Process')\");\n    }\n    if (isVague) {\n        points -= 5;\n        violations.push(\"Avoid vague terms. Be specific about what the control addresses.\");\n    }\n    return {\n        id: \"name.action_oriented\",\n        label: \"Action-oriented or specific language\",\n        points: Math.max(0, points),\n        max: 25,\n        status: points === 25 ? \"PASS\" : points >= 18 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\nfunction evalNamePurposeClarity(name) {\n    const tooShort = name.trim().split(/\\s+/).length < 2;\n    const tooGeneric = /^(security|compliance|controls?|management|system)$/i.test(name.trim());\n    let points = 25;\n    const violations = [];\n    if (tooShort) {\n        points -= 10;\n        violations.push(\"Name too short. Add context about the control's purpose.\");\n    }\n    if (tooGeneric) {\n        points -= 10;\n        violations.push(\"Name too generic. Specify what aspect is being controlled.\");\n    }\n    return {\n        id: \"name.purpose_clarity\",\n        label: \"Purpose clarity\",\n        points: Math.max(0, points),\n        max: 25,\n        status: points === 25 ? \"PASS\" : points >= 18 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\nfunction evalNameRoleNeutral(name) {\n    const hasRoleRef = ROLE_SPECIFIC.test(name);\n    const points = hasRoleRef ? 15 : 25;\n    const violations = hasRoleRef ? [\n        \"Avoid role-specific references in the name to ensure applicability across organizational structures\"\n    ] : undefined;\n    return {\n        id: \"name.role_neutral\",\n        label: \"Role-neutral\",\n        points,\n        max: 25,\n        status: points === 25 ? \"PASS\" : \"WARN\",\n        notes: violations?.[0],\n        violations\n    };\n}\n// ========== DESCRIPTION QUALITY CHECKS (30% weight) ==========\nfunction evalDescPresentTense(desc) {\n    const hasPresentTense = PRESENT_TENSE_INDICATORS.test(desc);\n    const hasFutureTense = /\\b(will|shall|going to)\\b/i.test(desc);\n    let points = 25;\n    const violations = [];\n    if (!hasPresentTense) {\n        points -= 10;\n        violations.push(\"Use present tense to convey the requirement is always applicable (e.g., 'is configured', 'are reviewed')\");\n    }\n    if (hasFutureTense) {\n        points -= 8;\n        violations.push(\"Avoid future tense ('will be'). Use present tense ('is').\");\n    }\n    return {\n        id: \"desc.present_tense\",\n        label: \"Present tense\",\n        points: Math.max(0, points),\n        max: 25,\n        status: points === 25 ? \"PASS\" : points >= 15 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\nfunction evalDescPassiveVoice(desc) {\n    const hasPassive = PASSIVE_VOICE_INDICATORS.test(desc);\n    const hasActiveDirective = DIRECTIVE_VERBS.test(desc) || ROLE_SPECIFIC.test(desc);\n    let points = 25;\n    const violations = [];\n    if (!hasPassive) {\n        points -= 8;\n        violations.push(\"Prefer passive voice for role-neutrality (e.g., 'Data is encrypted' not 'IT encrypts data')\");\n    }\n    if (hasActiveDirective) {\n        points -= 10;\n        violations.push(\"Avoid active voice directives. State the condition/outcome, not who performs it.\");\n    }\n    return {\n        id: \"desc.passive_voice\",\n        label: \"Passive voice (role-neutral)\",\n        points: Math.max(0, points),\n        max: 25,\n        status: points === 25 ? \"PASS\" : points >= 15 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\nfunction evalDescNoModalVerbs(desc) {\n    const hasModal = MODAL_VERBS.test(desc);\n    const points = hasModal ? 0 : 25;\n    const violations = hasModal ? [\n        \"Remove modal verbs (should/could/may/must/ensure). State the requirement definitively in present tense.\"\n    ] : undefined;\n    return {\n        id: \"desc.no_modal_verbs\",\n        label: \"No modal verbs (should/must/shall/ensure)\",\n        points,\n        max: 25,\n        status: points === 25 ? \"PASS\" : \"FAIL\",\n        notes: violations?.[0],\n        violations\n    };\n}\n// FIX 2: Better \"Single objective\" check - focus on multiple OUTCOMES, not sentences\nfunction evalDescSingleObjective(desc) {\n    // Check for multiple distinct outcomes (not just sentence count)\n    const hasMultipleAnds = (desc.match(/\\band\\b/gi) || []).length >= 3;\n    const hasOrClauses = /\\bor\\b/gi.test(desc);\n    // Check for multiple outcome statements (multiple \"is/are\" statements)\n    const outcomeStatements = desc.match(/\\b(is|are)\\s+[a-z]+ed\\b/gi) || [];\n    const multipleOutcomes = outcomeStatements.length > 2;\n    let points = 20;\n    const violations = [];\n    if (multipleOutcomes) {\n        points -= 10;\n        violations.push(`Multiple outcomes detected (${outcomeStatements.length} different states/results). Focus on one outcome per control.`);\n    }\n    if (hasMultipleAnds) {\n        points -= 5;\n        violations.push(\"Too many 'and' conjunctions. Consider if this is actually multiple controls.\");\n    }\n    if (hasOrClauses) {\n        points -= 5;\n        violations.push(\"'Or' clauses suggest ambiguity. Choose one clear objective.\");\n    }\n    return {\n        id: \"desc.single_objective\",\n        label: \"Single objective\",\n        points: Math.max(0, points),\n        max: 20,\n        status: points === 20 ? \"PASS\" : points >= 12 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\nfunction evalDescNoSteps(desc) {\n    // Check for ANY list markers anywhere in the description (not just at line start)\n    const hasListMarkers = /(?:[-*•]|\\d+[.)]|[a-z][.)])\\s+[A-Z]/.test(desc);\n    // Also check for directive/implementation language\n    const hasImplementationWords = /\\b(to achieve|implement|steps|following|procedure|process):/i.test(desc);\n    const hasSteps = hasListMarkers || hasImplementationWords;\n    const points = hasSteps ? 0 : 25;\n    const violations = hasSteps ? [\n        \"Description contains implementation steps. Move steps to Guidance section. Description should only state the outcome/requirement.\"\n    ] : undefined;\n    return {\n        id: \"desc.no_steps\",\n        label: \"No implementation steps\",\n        points,\n        max: 25,\n        status: points === 25 ? \"PASS\" : \"FAIL\",\n        notes: violations?.[0],\n        violations\n    };\n}\n// FIX #1: Change min_words to 20 instead of 25\n// UPDATED: Description word count 20-50 (not 20-120)\n// FIX 1: Change word count to 15-45\nfunction evalDescWordCount(desc) {\n    const words = desc.trim().split(/\\s+/).length;\n    const min = 15; // Changed from 20\n    const max = 45; // Changed from 50\n    const withinBounds = words >= min && words <= max;\n    let points = 20;\n    const violations = [];\n    if (words < min) {\n        points -= 10;\n        violations.push(`Too brief (${words} words). Add clarity. Aim for ${min}-${max} words.`);\n    } else if (words > max) {\n        points -= 8;\n        violations.push(`Too verbose (${words} words). Be concise. Aim for ${min}-${max} words.`);\n    }\n    return {\n        id: \"desc.word_count\",\n        label: `Word count (${min}-${max})`,\n        points: withinBounds ? points : Math.max(0, points),\n        max: 20,\n        status: withinBounds ? \"PASS\" : points >= 12 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? violations : undefined\n    };\n}\n// FIX #2: Improved acronym detection - checks both before AND after\nfunction evalDescStandaloneClarity(desc) {\n    const hasVagueTerms = /\\b(appropriate|adequate|reasonable|sufficient|proper|effective)\\b/i.test(desc);\n    // Find acronyms that are NOT expanded anywhere nearby (before or after)\n    const acronymPattern = /\\b([A-Z]{2,})\\b/g;\n    const acronyms = desc.match(acronymPattern) || [];\n    const unexpandedAcronyms = [];\n    for (const acronym of acronyms){\n        // Check if acronym is expanded in parentheses after it: \"DPO (Data Protection Officer)\"\n        const expandedAfter = new RegExp(`\\\\b${acronym}\\\\b\\\\s*\\\\([^)]+\\\\)`).test(desc);\n        // Check if acronym is in parentheses after expansion: \"Data Protection Officer (DPO)\"\n        const expandedBefore = new RegExp(`\\\\([^)]*\\\\b${acronym}\\\\b[^)]*\\\\)`).test(desc);\n        if (!expandedAfter && !expandedBefore) {\n            unexpandedAcronyms.push(acronym);\n        }\n    }\n    let points = 20;\n    const violations = [];\n    if (hasVagueTerms) {\n        points -= 8;\n        violations.push(\"Avoid vague qualifiers (appropriate/adequate). Be specific about requirements.\");\n    }\n    if (unexpandedAcronyms.length > 0) {\n        const acronym = unexpandedAcronyms[0];\n        points -= 5;\n        violations.push(`Expand acronym on first use: \"${acronym}\" → \"Full Term (${acronym})\"`);\n    }\n    return {\n        id: \"desc.standalone_clarity\",\n        label: \"Standalone clarity\",\n        points: Math.max(0, points),\n        max: 20,\n        status: points === 20 ? \"PASS\" : points >= 12 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\n// ========== GUIDANCE QUALITY CHECKS (40% weight) ==========\n// FIX #3: Check if guidance STARTS with a list marker (not just contains it)\n// UPDATED: Much stricter preamble detection - 0 points if no real preamble\n// UPDATED evalGuidancePreamble - More flexible objective/rationale detection\n// UPDATED evalGuidancePreamble - More flexible objective/rationale detection\n// UPDATED evalGuidancePreamble - More flexible objective/rationale detection\nfunction evalGuidancePreamble(guidance) {\n    const lines = guidance.split(\"\\n\").filter((l)=>l.trim());\n    if (lines.length === 0) {\n        return {\n            id: \"guid.preamble\",\n            label: \"Preamble (what + why)\",\n            points: 0,\n            max: 30,\n            status: \"FAIL\",\n            notes: \"Guidance is empty\",\n            violations: [\n                \"Add guidance with a preamble explaining objective and rationale\"\n            ]\n        };\n    }\n    // Check if FIRST line starts with a list marker or directive verb\n    const firstLine = lines[0].trim();\n    const startsWithList = /^(?:[-*•]|\\d+[.)]|[a-z][.)])\\s+/.test(firstLine);\n    const startsWithDirective = /^(deploy|implement|configure|monitor|review|establish|create|maintain|enable)\\b/i.test(firstLine);\n    // Extract preamble (text before first list marker)\n    const preambleMatch = guidance.match(/^([\\s\\S]+?)(?=\\n\\s*(?:[-*•]|\\d+[.)]|[a-z][.)])\\s+)/);\n    const preamble = preambleMatch ? preambleMatch[1].trim() : guidance.substring(0, 400);\n    // ✅ FIXED: More flexible objective detection\n    // NOW ACCEPTS:\n    // - \"to establish\" (original)\n    // - \"should establish\", \"must define\" (modal + verb)\n    // - \"aims to\", \"designed to\", etc.\n    const hasObjective = /\\b(objective|purpose|goal|aims?\\s+to|intended\\s+to|designed\\s+to|to\\s+(?:ensure|establish|support|define|create|maintain|implement)|(?:should|must|will)\\s+(?:establish|define|create|ensure|support|maintain|implement))\\b/i.test(preamble);\n    // ✅ FIXED: More flexible rationale detection\n    // NOW ACCEPTS:\n    // - \"to promote\" (original)\n    // - \"promotes\", \"enables\", \"supports\" (standalone verbs)\n    // - \"important\", \"critical\", \"because\" (existing)\n    const hasRationale = /\\b(rationale|because|important|critical|necessary|essential|to\\s+(?:support|enable|help|allow|protect|prevent|ensure|maintain|promote)|(?:promotes?|enables?|supports?|ensures?|maintains?|helps?|allows?|prevents?|protects?)\\b)/i.test(preamble);\n    // Preamble should be substantial (at least 15 words)\n    const preambleWords = preamble.split(/\\s+/).length;\n    const hasSubstantialPreamble = preambleWords >= 15;\n    let points = 30;\n    const violations = [];\n    // If guidance starts with a list or directive, there's no preamble - score 0\n    if (startsWithList || startsWithDirective) {\n        points = 0;\n        violations.push(\"No preamble found. Begin with 2-3 sentences explaining what this control achieves and why it matters before listing steps.\");\n        return {\n            id: \"guid.preamble\",\n            label: \"Preamble (what + why)\",\n            points: 0,\n            max: 30,\n            status: \"FAIL\",\n            notes: violations[0],\n            violations\n        };\n    }\n    // Otherwise, evaluate preamble quality\n    if (!hasSubstantialPreamble) {\n        points -= 12;\n        violations.push(`Preamble too brief (${preambleWords} words). Provide at least 2-3 sentences (15+ words) explaining the control's purpose.`);\n    }\n    if (!hasObjective) {\n        points -= 10;\n        violations.push(\"Preamble must state the objective (what this control achieves)\");\n    }\n    if (!hasRationale) {\n        points -= 8;\n        violations.push(\"Preamble must explain rationale (why this control matters)\");\n    }\n    return {\n        id: \"guid.preamble\",\n        label: \"Preamble (what + why)\",\n        points: Math.max(0, points),\n        max: 30,\n        status: points === 30 ? \"PASS\" : points >= 20 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\nfunction evalGuidanceStructuredSteps(guidance) {\n    const hasStructure = looksStructured(guidance);\n    const steps = extractSteps(guidance);\n    const stepCount = steps.length;\n    const min = spec.rules.guidance.steps_min || 2;\n    const max = spec.rules.guidance.steps_max || 8;\n    let points = 30;\n    const violations = [];\n    if (!hasStructure) {\n        points -= 15;\n        violations.push(\"Format steps as a numbered or bulleted list (e.g., 1. Step one; 2. Step two)\");\n    }\n    if (stepCount < min) {\n        points -= 10;\n        violations.push(`Too few steps (${stepCount}). Provide ${min}-${max} actionable steps.`);\n    } else if (stepCount > max) {\n        points -= 8;\n        violations.push(`Too many steps (${stepCount}). Consolidate to ${min}-${max} key steps.`);\n    }\n    return {\n        id: \"guid.structured_steps\",\n        label: `Structured steps (${min}-${max})`,\n        points: Math.max(0, points),\n        max: 30,\n        status: points === 30 ? \"PASS\" : points >= 18 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\n// FIX #4: Better action verb detection after list markers\nfunction evalGuidanceActionable(guidance) {\n    const steps = extractSteps(guidance);\n    // If we have structured steps, check if they start with action verbs\n    if (steps.length >= 2) {\n        const actionableSteps = steps.filter((step)=>{\n            // Remove list markers\n            const stepText = step.replace(/^\\s*(?:[-*•]|\\d+[.)]|[a-z][.)])\\s*/, \"\").trim();\n            const firstWord = stepText.split(/\\s+/)[0];\n            // Heuristic: Actionable if first word is:\n            // 1. Capitalized (imperative form)\n            // 2. Not a modal/article\n            // 3. At least 3 characters long\n            const isCapitalized = /^[A-Z]/.test(firstWord);\n            const notModalOrArticle = !/^(the|a|an|should|must|will|shall|may|can|could|would)$/i.test(firstWord);\n            const longEnough = firstWord.length >= 3;\n            return isCapitalized && notModalOrArticle && longEnough;\n        });\n        const ratio = actionableSteps.length / steps.length;\n        let points = Math.round(20 * ratio);\n        const violations = ratio < 1.0 ? [\n            `${steps.length - actionableSteps.length} step(s) don't start with action verbs. Begin with: implement, configure, review, monitor, etc.`\n        ] : undefined;\n        return {\n            id: \"guid.actionable\",\n            label: \"Steps are actionable\",\n            points,\n            max: 20,\n            status: points === 20 ? \"PASS\" : points >= 14 ? \"WARN\" : \"FAIL\",\n            notes: violations?.[0],\n            violations\n        };\n    }\n    // Fallback: If less than 2 steps, check for action verbs in general text\n    const actionVerbs = /\\b(implement|configure|review|monitor|document|define|establish|maintain|enable|create|develop|conduct|perform|verify|validate|assess|identify|ensure|designate|appoint|deploy|install|update|track|report|communicate|publish|record|escalate|investigate|remediate|disable)\\b/gi;\n    const matches = guidance.match(actionVerbs);\n    const actionVerbCount = matches ? matches.length : 0;\n    let points = 20;\n    const violations = [];\n    if (actionVerbCount === 0) {\n        points = 0;\n        violations.push(\"No action verbs found. Use actionable language (implement, configure, review, monitor, etc.)\");\n    } else if (actionVerbCount < 2) {\n        points = 10;\n        violations.push(\"Too few actionable instructions. Provide at least 2-3 action-oriented steps.\");\n    }\n    return {\n        id: \"guid.actionable\",\n        label: \"Steps are actionable\",\n        points,\n        max: 20,\n        status: points === 20 ? \"PASS\" : points >= 14 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? violations : undefined\n    };\n}\n// UPDATED: Evaluate tense/voice on actual content, not dependent on steps\nfunction evalGuidancePresentActive(guidance) {\n    // Look for present tense action verbs (imperatives) in the guidance\n    const presentImperatives = /\\b(implement|configure|review|monitor|document|define|establish|maintain|enable|create|develop|conduct|perform|verify|validate|assess|identify|designate|appoint)\\b/i.test(guidance);\n    // Check for past tense (wrong)\n    const hasPastTense = /\\b(configured|reviewed|implemented|established|created|developed|maintained|enabled|conducted|performed)\\b/i.test(guidance);\n    // Check for passive voice in guidance (wrong - should be active imperatives)\n    const hasPassive = /\\b(is|are|be)\\s+(?:configured|reviewed|implemented|established|maintained|enabled|conducted|performed)\\b/i.test(guidance);\n    let points = 20;\n    const violations = [];\n    if (!presentImperatives) {\n        points -= 10;\n        violations.push(\"Use present tense action verbs (e.g., 'Configure...', 'Review...', 'Monitor...')\");\n    }\n    if (hasPastTense) {\n        points -= 8;\n        violations.push(\"Avoid past tense (e.g., 'configured'). Use present tense imperatives (e.g., 'Configure')\");\n    }\n    if (hasPassive) {\n        points -= 7;\n        violations.push(\"Use active voice for steps (e.g., 'Review access logs' not 'Access logs are reviewed')\");\n    }\n    return {\n        id: \"guid.present_active\",\n        label: \"Present tense + active voice\",\n        points: Math.max(0, points),\n        max: 20,\n        status: points === 20 ? \"PASS\" : points >= 12 ? \"WARN\" : \"FAIL\",\n        notes: violations[0],\n        violations: violations.length > 0 ? dedupe(violations) : undefined\n    };\n}\nfunction evalGuidanceTechAgnostic(guidance) {\n    const vendorMatches = guidance.match(/\\b(aws|azure|gcp|google\\s+cloud|okta|servicenow|cisco|palo\\s*alto|fortinet|splunk|datadog|salesforce|snowflake|crowdstrike|microsoft|oracle|ibm|sap)\\b/gi) || [];\n    const hasVendor = vendorMatches.length > 0;\n    const points = hasVendor ? 10 : 20;\n    const uniqueVendors = Array.from(new Set(vendorMatches.map((v)=>v.toLowerCase())));\n    const vendorList = uniqueVendors.join(\", \");\n    const violations = hasVendor ? [\n        `Remove vendor/tool names (found ${vendorMatches.length}: \"${vendorList}\"). Use generic terms (e.g., \"identity management system\" not \"Okta\")`\n    ] : undefined;\n    return {\n        id: \"guid.tech_agnostic\",\n        label: \"Technology-agnostic\",\n        points,\n        max: 20,\n        status: points === 20 ? \"PASS\" : \"WARN\",\n        notes: violations?.[0],\n        violations\n    };\n}\nfunction evalGuidanceRoleNeutral(guidance) {\n    const hasRoleRef = ROLE_SPECIFIC.test(guidance);\n    const points = hasRoleRef ? 10 : 20;\n    const violations = hasRoleRef ? [\n        \"Avoid role-specific references (e.g., 'security team'). Keep guidance applicable across organizational structures.\"\n    ] : undefined;\n    return {\n        id: \"guid.role_neutral\",\n        label: \"Role-neutral\",\n        points,\n        max: 20,\n        status: points === 20 ? \"PASS\" : \"WARN\",\n        notes: violations?.[0],\n        violations\n    };\n}\nfunction evalGuidanceNoJargon(guidance) {\n    const hasJargon = JARGON_WORDS.test(guidance);\n    const points = hasJargon ? 12 : 20;\n    const jargon = guidance.match(JARGON_WORDS)?.[0];\n    const violations = hasJargon ? [\n        `Replace jargon \"${jargon}\" with plain language`\n    ] : undefined;\n    return {\n        id: \"guid.no_jargon\",\n        label: \"Plain language (no jargon)\",\n        points,\n        max: 20,\n        status: points === 20 ? \"PASS\" : \"WARN\",\n        notes: violations?.[0],\n        violations\n    };\n}\n// ========== AGGREGATION ==========\nfunction aggregateDimension(key, label, weight, checks) {\n    const totalMax = checks.reduce((sum, c)=>sum + c.max, 0);\n    const totalPoints = checks.reduce((sum, c)=>sum + c.points, 0);\n    const score = totalMax > 0 ? Math.round(totalPoints / totalMax * 100) : 0;\n    return {\n        key,\n        label,\n        score: Math.max(0, Math.min(100, score)),\n        max: 100,\n        weight,\n        checks\n    };\n}\nfunction buildMessages(...dims) {\n    const msgs = [];\n    for (const dim of dims){\n        for (const check of dim.checks){\n            if (check.status === \"FAIL\" && check.notes) {\n                msgs.push({\n                    level: \"FAIL\",\n                    text: check.notes\n                });\n            } else if (check.status === \"WARN\" && check.notes) {\n                msgs.push({\n                    level: \"WARN\",\n                    text: check.notes\n                });\n            }\n        }\n    }\n    return msgs.slice(0, 10);\n}\nfunction buildSuggestions(...dims) {\n    const suggestions = [];\n    const add = (s)=>{\n        if (s && !suggestions.includes(s)) suggestions.push(s);\n    };\n    // Collect unique suggestions from violations\n    for (const dim of dims){\n        for (const check of dim.checks){\n            if (check.violations) {\n                check.violations.forEach((v)=>add(v));\n            }\n        }\n    }\n    return suggestions.slice(0, 8);\n}\n// ========== MAIN SCORER ==========\nfunction scoreControl(item) {\n    const id = (item.id || \"\").trim();\n    const name = (item.name || \"\").trim();\n    const desc = (item.description || \"\").trim();\n    const guid = (item.guidance || \"\").trim();\n    // ID Dimension (15% weight)\n    const idChecks = [\n        evalIdStructured(id),\n        evalIdLength(id),\n        evalIdUniqueness(id)\n    ];\n    const idDim = aggregateDimension(\"id_quality\", \"Control ID Quality\", 0.15, idChecks);\n    // Name Dimension (15% weight)\n    const nameChecks = [\n        evalNameConcise(name),\n        evalNameActionOriented(name),\n        evalNamePurposeClarity(name),\n        evalNameRoleNeutral(name)\n    ];\n    const nameDim = aggregateDimension(\"name_quality\", \"Control Name Quality\", 0.15, nameChecks);\n    // Description Dimension (30% weight)\n    const descChecks = [\n        evalDescPresentTense(desc),\n        evalDescPassiveVoice(desc),\n        evalDescNoModalVerbs(desc),\n        evalDescSingleObjective(desc),\n        evalDescNoSteps(desc),\n        evalDescWordCount(desc),\n        evalDescStandaloneClarity(desc)\n    ];\n    const descDim = aggregateDimension(\"description_quality\", \"Description Quality\", 0.30, descChecks);\n    // Guidance Dimension (40% weight)\n    const guidChecks = [\n        evalGuidancePreamble(guid),\n        evalGuidanceStructuredSteps(guid),\n        evalGuidanceActionable(guid),\n        evalGuidancePresentActive(guid),\n        evalGuidanceTechAgnostic(guid),\n        evalGuidanceRoleNeutral(guid),\n        evalGuidanceNoJargon(guid)\n    ];\n    const guidDim = aggregateDimension(\"guidance_quality\", \"Guidance Quality\", 0.40, guidChecks);\n    // Calculate total score\n    const total = Math.round(idDim.score * 0.15 + nameDim.score * 0.15 + descDim.score * 0.30 + guidDim.score * 0.40);\n    // Check for critical failures (any check with max >= 15 that has status FAIL)\n    const criticalFail = [\n        idDim,\n        nameDim,\n        descDim,\n        guidDim\n    ].some((dim)=>dim.checks.some((check)=>check.status === \"FAIL\" && check.max >= 15));\n    // Determine verdict\n    let verdict;\n    if (criticalFail) {\n        verdict = \"fail\";\n    } else if (total >= (spec.scoring.thresholds.pass || 80)) {\n        verdict = \"pass\";\n    } else if (total >= (spec.scoring.thresholds.partial || 60)) {\n        verdict = \"partial\";\n    } else {\n        verdict = \"fail\";\n    }\n    return {\n        version: spec.meta.version || \"v1\",\n        verdict,\n        total: {\n            score: total,\n            max: 100,\n            formula: \"TOTAL = 0.15*ID + 0.15*NAME + 0.30*DESC + 0.40*GUIDANCE\",\n            weights: {\n                id: 0.15,\n                name: 0.15,\n                description: 0.30,\n                guidance: 0.40\n            },\n            gated_fail: criticalFail\n        },\n        dimensions: {\n            id_quality: idDim,\n            name_quality: nameDim,\n            description_quality: descDim,\n            guidance_quality: guidDim\n        },\n        messages: buildMessages(idDim, nameDim, descDim, guidDim),\n        suggestions: buildSuggestions(idDim, nameDim, descDim, guidDim)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./scorer/controls.ts\n");

/***/ }),

/***/ "(rsc)/./specs/controls_standard.v1.json":
/*!*****************************************!*\
  !*** ./specs/controls_standard.v1.json ***!
  \*****************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"meta":{"name":"GRC — Controls","version":"v1","description":"Deterministic rules for Control authoring: ID, Name, Description, Guidance (preamble → steps)."},"rules":{"id":{"required":true,"unique_within_framework":true,"structured":true,"separator":".","max_length":24},"name":{"required":true,"concise_max_words":12,"purpose_clarity":true,"action_or_specific":true,"role_neutral":true,"avoid_redundant_framework_name":true},"description":{"required":true,"present_tense":true,"passive_voice":true,"single_objective":true,"no_steps":true,"role_neutral":true,"avoid_modal_verbs":["should","could","may","might"],"min_words":25,"max_words":120,"standalone_clarity":true},"guidance":{"required":true,"preamble_required":true,"preamble_must_cover":["objective_what","rationale_why"],"preamble_max_words":60,"structured_steps_required":true,"steps_min":2,"steps_max":8,"steps_must_be_actionable":true,"steps_present_tense":true,"steps_active_voice":true,"technology_agnostic":true,"role_neutral":true,"avoid_vendor_names":true}},"scoring":{"dimensions":[{"key":"id_quality","weight":0.15,"checks":["required","unique_within_framework","structured","max_length_ok"]},{"key":"name_quality","weight":0.15,"checks":["concise_max_words","purpose_clarity","action_or_specific","role_neutral","no_framework_redundancy"]},{"key":"description_quality","weight":0.3,"checks":["present_tense","passive_voice","single_objective","no_steps","role_neutral","no_modal_verbs","within_word_bounds","standalone_clarity"]},{"key":"guidance_quality","weight":0.4,"checks":["preamble_required","preamble_covers_objective_rationale","preamble_within_word_bound","structured_steps_required","steps_min_max_ok","steps_actionable","steps_present_active","technology_agnostic","role_neutral","no_vendor_names"]}],"thresholds":{"pass":80,"partial":60}},"detectors":{"description_contains_steps":{"trigger":"description has step markers","action":"warn","suggestion_key":"move_steps_to_guidance"},"guidance_missing_structure":{"trigger":"no bullets/numbering in guidance","action":"warn","suggestion_key":"structure_guidance_steps"},"guidance_missing_preamble":{"trigger":"guidance starts with steps","action":"warn","suggestion_key":"add_preamble_what_why"}},"suggestions":[{"key":"move_steps_to_guidance","message":"Control Description must describe the outcome, not the steps. Move implementation steps to Guidance."},{"key":"structure_guidance_steps","message":"Guidance should be structured as 2–8 clear, actionable steps."},{"key":"add_preamble_what_why","message":"Begin Guidance with a brief preamble explaining the objective (what) and rationale (why), then list steps."}],"cadence_policy":{"soft_warning_on_fixed_cadence":true,"no_score_penalty":true,"suppression_if_text_mentions_clause":true,"warning_message":"A fixed cadence was detected (e.g., \'12 months\' or \'quarterly\'). Unless required by a law/standard, prefer flexible wording such as \'at regular intervals\' or \'for a period aligned to risk and regulatory requirements\'."}}');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcontrols%2Fscore%2Froute&page=%2Fapi%2Fcontrols%2Fscore%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontrols%2Fscore%2Froute.ts&appDir=%2Fworkspaces%2Fgrc-content-validator%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2Fgrc-content-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();